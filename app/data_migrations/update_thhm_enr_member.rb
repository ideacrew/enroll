# frozen_string_literal: true

require File.join(Rails.root, 'lib/mongoid_migration_task')

# Updates TaxHouseholdMemberEnrollmentMember objects for a given list of EnrollmentHbxIds.
# Given that TaxHouseholdMember ids are correct.
class UpdateThhmEnrMember < MongoidMigrationTask
  def process_enrollments(enrollments, logger, offset_count)
    enrollments.no_timeout.limit(1000).offset(offset_count).inject([]) do |_dummy, enrollment|
      tax_household_enrollments = TaxHouseholdEnrollment.where(enrollment_id: enrollment.id)

      tax_household_enrollments.each do |thh_enr|
        thh = thh_enr.tax_household
        enr_member_ids = enrollment.hbx_enrollment_members.pluck(:id)
        bad_thh_member_enr_members = thh_enr.tax_household_members_enrollment_members.select do |thh_member_enr_member|
          enr_member_ids.exclude?(thh_member_enr_member.hbx_enrollment_member_id)
        end

        next unless bad_thh_member_enr_members.present?
        assign_enr_member_id(bad_thh_member_enr_members, enrollment, thh, thh_enr)
        thh_enr.save!
      end
      logger.info "Successfully processed enrollment with hbx_id: #{enrollment.hbx_id}" unless Rails.env.test?
    rescue StandardError => e
      logger.info "Error: Message: #{e}, Backtrace: #{e.backtrace.join('\n')}, enrollment_hbx_id: #{enrollment.hbx_id}" unless Rails.env.test?
    end
  end

  def assign_enr_member_id(bad_thh_member_enr_members, enrollment, thh, thh_enr)
    bad_thh_member_enr_members.each do |bad_thh_member_enr_mmbr|
      thh_member_id = bad_thh_member_enr_mmbr.tax_household_member_id
      thhm = thh.tax_household_members.where(id: thh_member_id).first
      if thhm.present?
        enr_mmbr = enrollment.hbx_enrollment_members.where(applicant_id: thhm.applicant_id).first
        if enr_mmbr.present?
          bad_thh_member_enr_mmbr.hbx_enrollment_member_id = enr_mmbr.id
        else
          logger.info "No Matching HbxEnrollmentMember on enrollment with hbx_id: #{enrollment.hbx_id}, person_hbx_id: #{thhm.person.hbx_id}" unless Rails.env.test?
        end
      else
        logger.info "No Matching TaxHouseholdMember on thh with hbx_assigned_id: #{thh.hbx_assigned_id}" unless Rails.env.test?
      end
    rescue StandardError => e
      logger.info "Error: Message: #{e}, Backtrace: #{e.backtrace.join('\n')}, thh_enr id: #{thh_enr.id}" unless Rails.env.test?
    end
  end

  def fetch_hbx_enrollments
    input_enr_hbx_ids = ENV['enrollment_hbx_ids'].to_s.split(',').map(&:squish!)
    enrollment_hbx_ids = %w[1488312 1490521 1488999 1469128 1481461 1463776 1488451 1488462 1496652 1493759 1464117 1492706 1492712 1497084 1482279 1482355 1431956 1433336 1481485 1452989 1478471 1478723 1478725 1488313 1433500 1476511 1489119
                            1491020 1495082 1478466 1479376 1484681 1485568 1481302 1496282 1489910 1431530 1433315 1433812 1433719 1481444 1496482 1492378 1492381 1487580 1487728 1432350 1496350 1495102 1431535 1431537 1431539 1476006 1496657
                            1489196 1482934 1494109 1496492 1495967 1434968 1493637 1493915 1493920 1433927 1479655 1486798 1514861 1473087 1488738 1482314 1496363 1487769 1475254 1488938 1488939 1488945 1488946 1488953 1488954 1488961 1488962
                            1493672 1493673 1448658 1478648 1478699 1482701 1492900 1446611 1491040 1491046 1448728 1478608 1478610 1432177 1476180 1482918 1483187 1482859 1482997 1484726 1491709 1484029 1489367 1476961 1453004 1481258 1484564
                            1484411 1482014 1488748 1453631 1491258 1491260 1491337 1491338 1491382 1494847 1493095 1432660 1503696 1495471 1496456 1493732 1495755 1432099 1439477 1486316 1482073 1488900 1487926 1432527 1433197 1479545 1432941
                            1484138 1484155 1486744 1488857 1477022 1487685 1485078 1479292 1477086 1488821 1489946 1433777 1431524 1433133 1478521 1431925 1432143 1432637 1482204 1483252 1489235 1433539 1482236 1490998 1448889 1485444 1485469
                            1485487 1485500 1485541 1485542 1509841 1509846 1490575 1491785 1490953 1485718 1485748 1486599 1484800 1479288 1495886 1492202 1433154 1433156 1476410 1493844 1475880 1485528 1432098 1487831 1514407 1487201 1490305
                            1488574 1487388 1481677 1492732 1485154 1492552 1481568 1490192 1489109 1481609 1486950 1487431 1440398 1485600 1485774 1491125 1493642 1477847 1478535 1497065 1486198 1497053 1491261 1495898 1495962 1490557 1431534
                            1478998 1491238 1483656 1442394 1479373 1491934 1492201 1484745 1484747 1485459 1492249 1481935 1481989 1482021 1493262 1482309 1495849 1489413 1493752 1493640 1493646 1494026 1489319 1524057 1452420 1485614 1484596
                            1432103 1477679 1484510 1491362 1458319 1486363 1488419 1468386 1492724 1492727 1487337 1433177 1433335 1433198 1433358 1495791 1487619 1514422 1496071 1488781 1453389 1491389 1491393 1493213 1483715 1478942 1477713
                            1495544 1488230 1484561 1492144 1484067 1490850 1496994 1447254 1488767 1495176 1439262 1456298 1513709 1448571 1485460 1485464 1476739 1496239 1490690 1432326 1433486 1445050 1432953 1439083 1492744 1492792 1486187
                            1481056 1432886 1491427 1492316 1431715 1431716 1431725 1486086 1496424 1479416 1432131 1433181 1483310 1483465 1483508 1483517 1483520 1491739 1483811 1497041 1433200 1483394 1496119 1493012 1433162 1473661 1490771
                            1491078 1488266 1446622 1431936 1477859 1433464 1487049 1491059 1485421 1492009 1495522 1484717 1433332 1495207 1464522 1487969 1486152 1433979 1468432 1496612 1496618 1432162 1491776 1495397 1484684 1491324 1432556
                            1432558 1516229 1521193 1496488 1496499 1488111 1478477 1433310 1486693 1488585 1484529 1496166 1483111 1488223 1431923 1433143 1433418 1482779 1456257 1483780 1496097 1485071 1480100 1494357 1494225 1494001 1494005
                            1495907 1487506 1451087 1488581 1488852 1479566 1491594 1496266 1497628 1433293 1489617 1495971 1495980 1496010 1481996 1482004 1432211 1433296 1476973 1486822 1491637 1478222 1479954 1482979 1485051 1488736 1485605
                            1432299 1433406 1433817 1476602 1482213 1482451 1496397 1496277 1485216 1485222 1487939 1493377 1478685 1485906 1432263 1432825 1477809 1490622 1496454 1437363 1490741 1490756 1478920 1432252 1443711 1434499 1495229
                            1482160 1491514 1491542 1491676 1491678 1494164 1480116 1482120 1487441 1487071 1479937 1486107 1487492 1476874 1486332 1493802 1496028 1489579 1477110 1494832 1432150 1483051 1496372 1478383 1478393 1478412 1520727
                            1432815 1480510 1432129 1496434 1448975 1490720 1490722 1491608 1491613 1494441 1431464 1431466 1453502 1480103 1480143 1480216 1480219 1496835 1496840 1431483 1431624 1476035 1489965 1496405 1449217 1496403 1482053
                            1482055 1482729 1490024 1483977 1483059 1492021 1487354 1492615 1433098 1433351 1488295 1478267 1489001 1495950 1437916 1478972 1478974 1488030 1493045 1493711 1461655 1490491 1522818 1464893 1450093 1498622 1495033
                            1482952 1493525 1445189 1459844 1431762 1431867 1483830 1493725 1450592 1488800 1488802 1478859 1448792 1490490 1490493 1496520 1495302 1478968 1484838 1495589 1494305 1493409 1484927 1496616 1490925 1495264 1490618
                            1487878 1514430 1512842 1490526 1492037 1460585 1476938 1476962 1493351 1481410 1493115 1492918 1432668 1476286 1509610 1491390 1495774 1480218 1487807 1492262 1495550 1493124 1476991 1479346 1493815 1496412 1431896
                            1476091 1480345 1495699 1495702 1474096 1483451 1494516 1494520 1493665 1491014 1491176 1495413 1495421 1431723 1431714 1481953 1484456 1432066 1432279 1490902 1496972 1431811 1476077 1494915 1492119 1492716 1494258
                            1490455 1483918 1433144 1495836 1432680 1496443 1488607 1488614 1452779 1496345 1448338 1493432 1493442 1492891 1487756 1465125 1492633 1492634 1477916 1472770 1492958 1432060 1432061 1494212 1494245 1432233 1481140
                            1483048 1480048 1491269 1491282 1493286 1471762 1487258 1483591 1490672 1492576 1491760 1494492 1479624 1467667 1493895 1493909 1493923 1485151 1489749 1489092 1488046 1491240 1495996 1495723 1432622 1432623 1491013
                            1485199 1432139 1458014 1479451 1479452 1479525 1481829 1485889 1433302 1433305 1477030 1484369 1432117 1433871 1476615 1490842 1490055 1477852 1492886 1485477 1479083 1511107 1511114 1496338 1495590 1495605 1484600
                            1491828 1484474 1477414 1489212 1489254 1479244 1492695 1483854 1484515 1488232 1488256 1488269 1488270 1488285 1488287 1490432 1490433 1490973 1494295 1496232 1489798 1478770 1478775 1492857 1493617 1482904 1493972
                            1494887 1494928 1494983 1505364 1505365 1508365 1432123 1490351 1478582 1477692 1431538 1488077 1490898 1482330 1482346 1482397 1483419 1483420 1483444 1484058 1488931 1485479 1478748 1487602 1487659 1487732 1483615
                            1486195 1490330 1492872 1481740 1486896 1493953 1493962 1494976 1478065 1478082 1478092 1485028 1485041 1487808 1505118 1464926 1489261 1492307 1496480 1483522 1495772 1488803 1478673 1480682 1496118 1482113 1485535
                            1487155 1485194 1476950 1483488 1484509 1484522 1484546 1491151 1496529 1455108 1494213 1433317 1433813 1433818 1455507 1490267 1492239 1523513 1523514 1492248 1481088 1490410 1432022 1490355 1482501 1491208 1432394
                            1492389 1491653 1508249 1456058 1493461 1495326 1484555 1493035 1432711 1484907 1491856 1494589 1484854 1482823 1496898 1432007 1491488 1486493 1488328 1482115 1495959 1494224 1495304 1476783 1483114 1478624 1487862
                            1481491 1486832 1472804 1493346 1490008 1484633 1431553 1461491 1481533 1494032 1485917 1490002 1518880 1496027 1481225 1490378 1491048 1481430 1491834 1489317 1433636 1476549 1487613 1490763 1479209 1479298 1479300
                            1492225 1432919 1433534 1495396 1494537 1431709 1495990 1483941 1484874 1478993 1468222 1495119 1494825 1494827 1483983 1483984 1433561 1515636 1524915 1431583 1433547 1484764 1485135 1483803 1487264 1495890 1432137
                            1485301 1433189 1495816 1495317 1487612 1485667 1495894 1493413 1496217 1496325 1488109 1488190 1491558 1493559 1493570 1507406 1491375 1470484 1495568 1495597 1478324 1482153 1479393 1431578 1492326 1485755 1478461
                            1471383 1494363 1431557 1483338 1483352 1492632 1485844 1488843 1496280 1433283 1491798 1433728 1492131 1487410 1487664 1483001 1482280 1492700 1484525 1493002 1496584 1484963 1488885 1491730 1493876 1487346 1431703
                            1431711 1482957 1494313 1478325 1478327 1491188 1490399 1482951 1487032 1488468 1493855 1432546 1432305 1484422 1433596 1487577 1487369 1488054]

    HbxEnrollment.where(:hbx_id.in => (input_enr_hbx_ids.presence || enrollment_hbx_ids))
  end

  def migrate
    logger = Logger.new("#{Rails.root}/log/thhm_enr_member_update_#{TimeKeeper.date_of_record.strftime('%Y_%m_%d')}.log")
    start_time = DateTime.current
    logger.info "UpdateThhmEnrMember start_time: #{start_time}" unless Rails.env.test?
    enrollments = fetch_hbx_enrollments
    total_count = enrollments.count
    logger.info "Total number of enrollments to be processed #{total_count}" unless Rails.env.test?
    enrollments_per_iteration = 1000.0
    number_of_iterations = (total_count / enrollments_per_iteration).ceil
    counter = 0

    while counter < number_of_iterations
      offset_count = enrollments_per_iteration * counter
      process_enrollments(enrollments, logger, offset_count)
      counter += 1
    end
    end_time = DateTime.current

    logger.info "UpdateThhmEnrMember end_time: #{end_time}, total_time_taken_in_minutes: #{((end_time - start_time) * 24 * 60).to_i}" unless Rails.env.test?
  end
end
