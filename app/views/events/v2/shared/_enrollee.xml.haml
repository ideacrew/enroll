%enrollee
  %member
    %id
      %id= "urn:openhbx:hbx:dc0:resources:v1:person:hbx_id##{hbx_enrollment_member.person.hbx_id}"
    = render :partial=> "events/v2/individuals/person", :object => hbx_enrollment_member.person, as: :person
    - if subscriber
      - if subscriber.person.person_relationship_for(hbx_enrollment_member.person).present?
        %person_relationships
          = render :partial => "events/v2/individuals/person_relationship", :object => subscriber.person.person_relationship_for(hbx_enrollment_member.person)
    - else
      %person_relationships
        = render :partial => "events/v2/individuals/person_relationship", :object => hbx_enrollment.family.primary_family_member.person.person_relationship_for(hbx_enrollment_member.person)
    %person_demographics
      %ssn= hbx_enrollment_member.person.ssn
      %sex= "urn:openhbx:terms:v1:gender##{hbx_enrollment_member.person.gender}"
      %birth_date= simple_date_for(hbx_enrollment_member.person.dob)
      - if !hbx_enrollment_member.person.is_incarcerated.present?
        %is_incarcerated= "false"
      - else
        %is_incarcerated= hbx_enrollment_member.person.is_incarcerated.to_s
      - if !hbx_enrollment_member.person.race.blank?
        %race= hbx_enrollment_member.person.race
  %is_subscriber= hbx_enrollment_member.is_subscriber
  %benefit
    %premium_amount= (hbx_enrollment.premium_for(hbx_enrollment_member).round(2))
    %begin_date= simple_date_for(hbx_enrollment_member.coverage_start_on)
    - if (HbxEnrollment::TERMINATED_STATUSES + ['coverage_termination_pending']).include?(hbx_enrollment.aasm_state)
      %end_date= simple_date_for(hbx_enrollment.terminated_on)
    - elsif (HbxEnrollment::CANCELED_STATUSES).include?(hbx_enrollment.aasm_state)
      %end_date= simple_date_for(hbx_enrollment_member.coverage_start_on)
