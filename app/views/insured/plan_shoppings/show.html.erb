<% if @bs4 %>
  <%= render partial: 'shared/plan_shopping_progress', locals: { current_page: :choose_plan, nav_options: plan_shopping_progress_hash } %>

  <div id="message_form"></div>

  <div class="select_plan_wrapper" id="plan_shoppings_show_form">
    <h1><%= l10n("insured.plan_shoppings.show.title") %></h1>
    <p><%= @coverage_kind == "health" ? l10n("insured.plan_shoppings.show.health_title.content") : l10n("insured.plan_shoppings.show.dental_title.content")%></p>
    <a class="back btn outline my-2" href="#"><%= l10n("previous_step") %></a>
    <%= render "shared/plan_shoppings/more_plan_details" %>

    <div id="plan-summary"></div>

    <div id="all-plans" class="all-filters-row">
      <details close id="plan-filter-container" class="my-3">
        <summary data-open="Close Filters" data-close="Show Filters"></summary>
        <div class="mt-3">
          <%= render partial: './ui-components/v1/filters/plan_filters' %>
        </div>
      </details>

      <hr />

      <div class="d-flex justify-content-between">
        <h2><%= l10n("plans.plan_results") %></h2>
        <% if @market_kind == "individual" || @market_kind == 'coverall' %>
          <button class="button button-primary ivl-compare-selected-plans-link hidden" data-cuke="ivl-compare-selected-plans-link" id="compareBtn"
            data-uri="<%= comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind, bs4: @bs4) %>">
            <%= l10n("compare_plans") %>
          </button>
        <% end %>
      </div>

      <div id="planContainer" class="my-3" >
        <% if @market_kind == 'individual' || @market_kind == 'coverall' %>
          <div id="ivl_plans">
            <h3 data-plans-loading><%= l10n("loading") %></h3>
          </div>
        <% end %>

        <% if @market_kind == 'shop' || @market_kind == 'fehb' %>
          <div id="plans"><%= render partial: "ui-components/v1/cards/plan_details", collection: @member_groups, as: :plan %></div>
          <div id="filteredPlans" data-enrollments="<%= json_for_plan_shopping_member_groups(@member_groups) %>"></div>
        <% end %>
      </div>
    </div>
  </div>


  <%# Modals %>
  <%= render "ui-components/v1/modals/detail_modal" %>
  <div class="modal fade" id="ivl-plans-compare-alert">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
          <h4 class="modal-title"><%= l10n("plan_compare_alert") %></h4>
        </div>
        <div class="modal-body">
          <p><%= l10n(".can_not_select_more_than_n_plans_to_compare", number: 3) %></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal"><%= l10n("Close") %></button>
        </div>
      </div>
    </div>
  </div>
  <%= render partial: "ui-components/v1/modals/waive_confirmation_during_shopping", locals: { enrollment: @hbx_enrollment } if @hbx_enrollment.is_shop? %>


  <style>
    details#plan-filter-container > summary {
      list-style-type: none;
      font-weight: bold;
      text-size: 18px;
    }

    details#plan-filter-container > summary::-webkit-details-marker, details > summary::marker  {
      display: none;
    }

    details#plan-filter-container[open] summary::after {
      content: attr(data-open) url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M5 13L9.29289 8.70711C9.68342 8.31658 10.3166 8.31658 10.7071 8.70711L15 13' stroke='%23323130' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A");
    }

    details#plan-filter-container:not([open]) summary::after {
      content: attr(data-close) url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M15 8L10.7071 12.2929C10.3166 12.6834 9.68342 12.6834 9.29289 12.2929L5 8' stroke='%23323130' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E%0A");
    }
  </style>


  <script>
    var marketKind = "<%= @hbx_enrollment.is_shop? ? 'shop' : @hbx_enrollment.kind %>";

    // Needs to be defined outside of conditional for marketKind
    // because will try to render on plan_filters.html.slim even on individual market
    var selectedPlans = document.getElementsByClassName("myfilteredPlans");

    function resetAllFilters() {
      resetAptc();
      clearAll(); // Defined in plan_filters.js
      resetPlanTileSelection();
    }

    function resetAptc() {
      if ($('.aptc').length > 0){
        let element = document.querySelector('#elected_aptc');
        let original_aptc = element.dataset.elected;
        element.value = original_aptc;
        element.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }

    function resetPlanTileSelection() {
      Array.from(selectedPlans).forEach(function (plan) {
        if (plan) {
          plan.remove();
        }
      });
      if ($('#plans').length > 0) {
        $('#plans').each( function () {
          $(this).removeClass('hidden');
        });
      }
    }

    if (marketKind === "shop") {
      var availableEnrollments = [];
      var availableCarriers = [];
      var filteredArray = [];
      var currentPlans = [];
      var filteredResultsArray = [];
      var enrollments = document.getElementById('filteredPlans').dataset.enrollments;
      var carriers = document.getElementById('filteredPlans').dataset.carriers;
      var filterType = String;
      // Needs to be used for IVL too
      // var selectedPlans = document.getElementsByClassName("myfilteredPlans");
      var carrierLogos = JSON.parse('<%= raw(digest_logos.to_json) %>');
      // Grabs available products as JSON for filtering onload
      (function () {
        document.getElementById('filteredPlans').classList.add('hidden');
        getEnrollments()
      })();

      var coverageKind = "<%= @hbx_enrollment.coverage_kind %>";

      // Allow filtering from high to low
      if (coverageKind == "dental") {
        $(".plan-metal-level-selection-filter").filter(
          plan_filter => plan_filter.id != 'plan-metal-level-high' && plan_filter.id != 'plan-metal-level-low'
        ).attr("disabled", true);
      }

      function filterBy(element) {
        filterType = element.dataset.sortBy;
        resetPlanTileSelection();
        clearAll()
        applyFilter()
        filteredPlans(filterType)
      }

      function getEnrollments() {
        enrollments = JSON.parse(enrollments)
        // Formats enrollment to proper JSON format for filters
        for (enrollment of enrollments) {
          enrollment = enrollment
          availableEnrollments.push(enrollment)
        }
      }

      function applyFilter() {
        // Apply's filtered plans to view
        document.getElementById('plans').classList.add('hidden')
        document.getElementById('filteredPlans').classList.remove('hidden')
      }

      function filteredPlans(type) {
        filteredArray = [];


        if (type == "plan-name") {
          // Filters by Title
          availableEnrollments.forEach(function (enrollment) {
              filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var titleA = a.product.title.toLowerCase();
            var titleB = b.product.title.toLowerCase();
            if (titleA < titleB) //sort string ascending
              return -1
            if (titleA > titleB)
              return 1
            return 0 //default return value (no sorting)
        })
        }

        if (type == "plan-metal-premium") {
          // Filter by premium
          availableEnrollments.forEach(function (enrollment) {
            filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var priceA = parseAmount(a.product_cost_total, 2) - parseAmount(a.sponsor_contribution_total, 2);
            var priceB = parseAmount(b.product_cost_total, 2) - parseAmount(b.sponsor_contribution_total, 2);
            if (Number(priceA) < Number(priceB)) //sort string ascending
              return -1
            if (Number(priceA) > Number(priceB))
              return 1
            return 0 //default return value (no sorting)
          })
        }

        if (type == "plan-metal-deductible") {
          // Filter by deductible
          availableEnrollments.forEach(function (enrollment) {
            filteredArray.push(enrollment)
          })

          filteredArray.sort(function (a, b) {
            var priceA = parseAmount(a.product.deductible, 0);
            var priceB = parseAmount(b.product.deductible, 0);
            if (Number(priceA) < Number(priceB)) //sort string ascending
              return -1
            if (Number(priceA) > Number(priceB))
              return 1
            return 0 //default return value (no sorting)
          })
        }

        if (type == "plan-carrier") {
          // Filters by Carrier
          availableEnrollments.forEach(function (enrollment) {
            filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var nameA = a.product.issuer_name.toLowerCase();
            var nameB = b.product.issuer_name.toLowerCase();
            if (nameA < nameB) //sort string ascending
              return -1
            if (nameA > nameB)
              return 1
            return 0 //default return value (no sorting)
          })
        }

        showFilteredResults()
      }

      function parseAmount(str, decimals){
        return parseFloat(str.replaceAll(/$|,/g, '')).toFixed(decimals);
      }

      function filterByMetalLevels(metalLevels, dataArray) {
        var resultsData = [];
        metalLevels.forEach(function (metalLevel) {
          dataArray.forEach(function (enrollment) {
            if (enrollment.product.metal_level_kind.toLowerCase() == metalLevel.toLowerCase()) {
              resultsData.push(enrollment);
            }
          })
        })
        return resultsData;
      }

      function filterByPlanTypes(planTypes, dataArray) {
        var resultsData = [];
        planTypes.forEach(function (plan) {
          dataArray.forEach(function (enrollment) {
            if (enrollment.product.kind == 'dental' && enrollment.product.dental_plan_kind.toLowerCase() == plan.toLowerCase()){
              resultsData.push(enrollment);
            }
            if (enrollment.product.kind == 'health' && enrollment.product.health_plan_kind.toLowerCase() == plan.toLowerCase()) {
              resultsData.push(enrollment);
            }
          })
        })
        return resultsData;
      }

      function filterByCarrier(carrier, dataArray) {
        var resultsData = [];
        dataArray.forEach(function (enrollment) {
          if (enrollment.product.issuer_name.toLowerCase() == carrier.toLowerCase()) {
            resultsData.push(enrollment);
          }
        })
        return resultsData;
      }

      function filterByHSA(selectedHSA, dataArray) {
        var resultsData = [];
        hsa = selectedHSA == "Yes";

        dataArray.filter(function (enrollment) {
          if (enrollment.product.hsa_eligibility == hsa) {
            resultsData.push(enrollment);
          }
        })
        return resultsData;
      }

      function filterByOSSE(selectedOSE, dataArray) {
        var resultsData = [];
        osse = selectedOSSE == "Yes";

        dataArray.filter(function (enrollment) {
          if (enrollment.product.is_hc4cc_plan == osse) {
            resultsData.push(enrollment);
          }
        })
        return resultsData;
      }

      function filterByPremiumAmountRange(selections, dataArray) {
        var resultsData = [];
        premiumFrom = parseFloat(selections.premiumFromAmountValue || 0).toFixed(2);
        premiumTo = parseFloat(selections.premiumToAmountValue || 0).toFixed(2);

        dataArray.forEach(function (enrollment) {
          premiumTotal = parseFloat(enrollment.product_cost_total - enrollment.sponsor_contribution_total).toFixed(2);
          if ((Number(premiumFrom) > 0 && Number(premiumTo) > 0) && (Number(premiumTotal) >= Number(premiumFrom) && Number(premiumTotal) <= Number(premiumTo))) {
            resultsData.push(enrollment);
          }
          else if ((Number(premiumFrom) > 0 && Number(premiumTo) == 0) && (Number(premiumTotal) >= Number(premiumFrom))) {
            resultsData.push(enrollment);
          }
          else if ((Number(premiumFrom) == 0 && Number(premiumTo) > 0) && (Number(premiumTotal) <= Number(premiumTo))) {
            resultsData.push(enrollment);
          }
        })
        return resultsData;
      }

      function filterByDeductibleAmountRange(selections, dataArray) {
        var resultsData = [];
        deductibleFrom = parseFloat(selections.deductibleFromAmountValue || 0).toFixed(0);
        deductibleTo = parseFloat(selections.deductibleToAmountValue || 0).toFixed(0);

        dataArray.forEach(function (enrollment) {
          deductible = parseFloat(enrollment.product.deductible.replace(',', '').replace('$', '')).toFixed(0);
          if ((Number(deductibleFrom) > 0 && Number(deductibleTo) > 0) && (Number(deductible) >= Number(deductibleFrom) && Number(deductible) <= Number(deductibleTo))) {
            resultsData.push(enrollment);
          }
          else if ((Number(deductibleFrom) > 0 && Number(deductibleTo) == 0) && (Number(deductible) >= Number(deductibleFrom))) {
            resultsData.push(enrollment);
          }
          else if ((Number(deductibleTo) > 0 && Number(deductibleFrom) == 0) && (Number(deductible) <= Number(deductibleTo))) {
            resultsData.push(enrollment);
          }
        })
        return resultsData;
      }

      function filterByNetworkTypes(networkTypes, dataArray) {
        var resultsData = [];

        networkTypes.forEach(function (networkType) {
          dataArray.forEach(function (enrollment) {
            if (networkType.toLowerCase() == 'dc-metro' || networkType.toLowerCase() == 'maine') {
              if (enrollment.product.dc_in_network) {
                resultsData.push(enrollment);
              }
            }
            if (networkType.toLowerCase() == 'nationwide') {
              if (enrollment.product.nationwide) {
                resultsData.push(enrollment);
              }
            }
          })
        })
        return resultsData;
      }

      function filterResultsSelections(selections) {
        var resultsArray;
        var filtered = false;

        metalLevels = selections.selectedMetalLevels;
        planTypes = selections.selectedPlanTypes;
        networkTypes = selections.selectedPlanNetworks;
        carrier = selections.selectedCarrier;
        selectedHSA = selections.selectedHSA;
        selectedOSSE = selections.selectedOSSE;
        resultsArray = availableEnrollments;

        if (metalLevels.length) {
          filtered = true;
          resultsArray = filterByMetalLevels(metalLevels, resultsArray)
        }

        if (planTypes.length) {
          filtered = true;
          resultsArray = filterByPlanTypes(planTypes, resultsArray)
        }

        if (networkTypes.length) {
          filtered = true;
          resultsArray = filterByNetworkTypes(networkTypes, resultsArray)
        }

        if (carrier) {
          filtered = true;
          resultsArray = filterByCarrier(carrier, resultsArray)
        }

        if (selectedHSA) {
          filtered = true;
          resultsArray = filterByHSA(selectedHSA, resultsArray)
        }

        if (selectedOSSE) {
          filtered = true;
          resultsArray = filterByOSSE(selectedOSSE, resultsArray)
        }

        if (selections.premiumFromAmountValue != "" || selections.premiumToAmountValue != "") {
          filtered = true;
          resultsArray = filterByPremiumAmountRange(selections, resultsArray)
        }

        if (selections.deductibleFromAmountValue != "" || selections.deductibleToAmountValue != "") {
          filtered = true;
          resultsArray = filterByDeductibleAmountRange(selections, resultsArray)
        }

        // Removes duplicates from results array
        filteredArray = removeDuplicates(resultsArray)
        if (filteredArray.length == 0 && !filtered) {
          filteredArray = availableEnrollments;
        }
        // Shows results in the view
        $("#plans-count").text(filteredArray.length);
        resetPlanTileSelection();
        applyFilter();
        resetComparePlan();
        showFilteredResults()
      }

      function showFilteredResults() {
        var element = document.getElementById('filteredPlans');
        filteredArray.forEach(function (result) {
          var logo = carrierLogos[result.product.issuer_name];
          if (result.product.kind == 'health') {
            var plan_kind = result.product.health_plan_kind
          }
          else if (result.product.dental_plan_kind) {
            var plan_kind = result.product.dental_plan_kind;
          }
          // Used to show deductible for plan
          if (result.member_enrollments.length > 1) {
            var deductible = result.product.family_deductible;
            var deductibeType = "FAMILY DEDUCTIBLE";
          } else {
            var deductible = result.product.deductible;
            var deductibeType = "DEDUCTIBLE";
          }
          if (result.product.sbc_document) {
            var sbc_url = '/document/download/'
            + result.product.sbc_document.identifier.split("#")[0].split(":").pop() + '/'
            + result.product.sbc_document.identifier.split("#")[1] + '?content_type=application/pdf&amp;filename='
            + result.product.title.replace(/[^0-9a-z]/gi, '') + '.pdf&amp;disposition=inline';
          }
          else {
            var sbc_url = "";
          }

          var network = "";
          if (result.product.dc_in_network) {
            network = "<%= EnrollRegistry[:enroll_app].setting(:statewide_area).item %>";
          }

          if (result.product.nationwide) {
            network = "<%= EnrollRegistry[:enroll_app].setting(:nationwide_area).item %>";
          }

          var standard_plan = "";
          if (result.product.is_standard_plan) {
            standard_plan = "<%= EnrollRegistry[:enroll_app].setting(:standard_plan_label).item %>";
          }

          var div = document.createElement('div');
          div.setAttribute('class', 'myfilteredPlans');
          div.innerHTML =
          `
          <div class="module plan-row panel panel-default">
            <div class="panel-body">
              <div class="row ${result.product.is_standard_plan ? '' : 'hidden'}">
                <span class="ml-1 text-uppercase" style="color:green"><i class="fas fa-bookmark"></i> ${standard_plan}</span>
              </div>
              <div class="row mt-1">
                <div class="col-sm-2 col-md-2">
                  <img width="80px" src="${logo}">
                </div>
                <div class="col-md-7" id="plans">
                  <h3 class="no-buffer pl-1"><a href="/products/plans/summary?active_year=${result.rate_schedule_date.split('-')[0]}&coverage_kind=${result.product.kind}&enrollment_kind=&hbx_enrollment_id=<%=@hbx_enrollment.id.to_s%>&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&standard_component_id=${result.product.hios_id}" data-remote="true">${result.product.title}</a>
                    <br>
                    <small>${result.product.issuer_name}</small>
                  </h3>
                </div>
                <div class="col-md-3">
                  <div class="price-wrapper pull-right">
                    <h2 class="no-buffer plan-premium">
                      $${parseFloat(Math.max((result.product_cost_total_after_subsidy - result.sponsor_contribution_total), 0.0)).toFixed(2)}
                    </h2>
                    <small style="font-size:12px" class="mt-0">Month</small>
                  </div>
                </div>
              </div>
              <div class="row mt-2">
                <div class="col-md-12">
                  <table class="table gn-12">
                    <thead>
                      <tr>
                        <th scope="col">TYPE</th>
                        <th scope="col">LEVEL</th>
                        <th scope="col">NETWORK</th>
                        <th scope="col">${deductibeType}</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>${plan_kind.toUpperCase()}</td>
                        <td><span class="${result.product.metal_level_kind}-icon">${result.product.metal_level_kind.toUpperCase()}</td>
                        <td>${network}</td>
                        <td>${deductible}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
              <div class="row">
                <div class="col-xs-3">
                  <div class="checkbox no-buffer">
                    <label>
                      <input id="compare_plan_checkbox" type="checkbox" class="checkbox-custom select-plan-for-comparison" data-hbx-id="<%=@hbx_enrollment.id.to_s%>" data-hios-id="${result.product.hios_id}" data-plan-year="${result.rate_schedule_date.split('-')[0]}" data-plan-enrollment-kind="${result.product.kind}" data-plan-change-plan="<%=@change_plan%>" onclick="comparePlan(this)">
                      <span class="checkbox-custom-label" for="compare_plan_checkbox" style="font-weight: bold" data-cuke="compare_plan_checkbox">Compare</span>
                    </label>
                  </div>
                </div>
                <div class="col-xs-4">
                  <a class="sbc_link health vertically-aligned-row interaction-click-control-summary-of-benefits-and-coverage" target="_blank" rel="noopener noreferrer" href= '${sbc_url}'>
                    Summary of Benefits and Coverage
                  </a>
                </div>
                <div class="col-md-5 col-sm-5 col-xs-5 pl-0 pr-0">
                  <a class="btn btn-default btn-right plan-select select" href="/insured/plan_shoppings/<%=@hbx_enrollment.id.to_s%>/thankyou?change_plan=&coverage_kind=${result.product.kind}&enrollment_kind=&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&plan_id=${result.product._id}">Select Plan</a>
                  <a class="btn btn-default ml-1" data-remote="true" href="/products/plans/summary?active_year=${result.rate_schedule_date.split('-')[0]}&coverage_kind=${result.product.kind}&enrollment_kind=&hbx_enrollment_id=<%=@hbx_enrollment.id.to_s%>}&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&standard_component_id=${result.product.hios_id}">See Details</a>
                </div>
              </div>
            </div>
          </div>
          `
          element.append(div)});
      }
    }

    if (marketKind === 'individual' || marketKind === 'coverall') {
      $(document).ready(function () {
        var coverageKind = "<%= @hbx_enrollment.coverage_kind %>";
        $.ajax({
          url: "<%= plans_insured_plan_shopping_path(id: @hbx_enrollment.id, change_plan: @change_plan, market_kind: @market_kind, coverage_kind: @coverage_kind, enrollment_kind: @enrollment_kind) if @hbx_enrollment.present? %>",
          type: "GET"
        });
      });
    }

    function removeDuplicates(data) {
      return data.filter((item, index,arr)=>{
        var c = arr.map(item=> item.product._id);
        return index === c.indexOf(item.product._id)
      })
    }

    String.prototype.replaceAll = function(search, replace) {
      if (replace === undefined) {
        return this.toString();
      }

      return this.replace(new RegExp('[' + search + ']', 'g'), replace);
    };
  </script>
<% else %>
  <% content_for :horizontal_status do %>
    <%= render partial: 'insured/families/horizontal_status.html.erb', locals: { step: 2 } %>
  <% end %>
  <%= render "ui-components/v1/modals/detail_modal" %>
  <div id="message_form">
    <div class="container" id="plan_shoppings_show_form">
      <div class="select_plan_wrapper">
        <div class="row">
          <div class="col-lg-8 col-md-8 col-sm-8 col-xs-12">
            <div class="ct-1">
              <h1 class="heading-text"><%= l10n("insured.plan_shoppings.show.title") %></h1>
              <% if @coverage_kind == "health" %>
                <h4 class="switch-header"><%= l10n("insured.plan_shoppings.show.health_title.content") %></h4>
              <% else %>
                <h4 class="switch-header"><%= l10n("insured.plan_shoppings.show.dental_title.content") %></h4>
              <% end %>
              <h4 class="swtich-header">
                <% if @market_kind == "shop" && EnrollRegistry.feature_enabled?(:display_cost_warning_message) %>
                  <% if @hbx_enrollment.sponsored_benefit.single_plan_type? %>
                    <strong>Please note your final cost may change based on the final enrollment of all employees.</strong>
                  <% end %>
                  <% if display_plan_cost_warning(@benefit_group) %>
                    <b><%= l10n("insured.plan_shoppings.final_cost_change") %></b>
                  <% end %>
                <% end %>
              </h4>
              <div class="row no-buffer">
                <%= render "shared/plan_shoppings/more_plan_details" %>
              </div>
              <p class="pull-right">
                <% if @market_kind == "individual" || @market_kind == 'coverall' %>
                  <a class="btn btn-default ivl-compare-selected-plans-link" id="compareBtn" href="javascript:void(0);" style="display: none;" data-cuke="ivl-compare-selected-plans-link" data-uri="<%= comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind) %>">
                    <%= l10n("compare_plans").to_s.upcase %>
                  </a>
                <% end %>
                <% if @market_kind == "shop" || @market_kind == 'fehb' %>
                  <a class="btn btn-default compare-selected-plans-link" id="compareBtn" href="javascript:void(0);" style="display: none;" data-uri="<%= comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind) %>">
                    <%= l10n("compare_plans").to_s.upcase %>
                  </a>
                <% end %>
              </p>
              <div id="plan-summary"></div>
              <div id="all-plans" class="all-filters-row">
                <%= render partial: './ui-components/v1/filters/plan_filters' %>
                <div class="col-lg-9 col-md-9 co-sm-9 col-xs-12" id="planContainer" style="padding-right:0">
                  <% if @market_kind == 'shop' || @market_kind == 'fehb' %>
                    <button class="btn btn-default pull-right hidden" id="compareBtn" onclick="compareResults()" data-uri="<%= comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind) %>">
                      <%= l10n("compare_plans").to_s.upcase %>
                    </button>
                  <% end %>
                  <br>
                  <div class="sort-area mt-1 mb-1">
                    <span class="mr-1">
                      <strong><%= l10n("sort_by") %></strong>
                    </span>
                    <div class="btn-group" id="sort_by" role="group">
                      <a class="btn btn-default" id="plan_name_filter" tabindex="0" onkeydown="handleButtonKeyDown(event, 'plan_name_filter')" data-sort-by="plan-name" onclick="filterBy(this)">
                        <%= l10n("plan_name") %>
                      </a>
                      <a class="btn btn-default" id="premium_amount_filter" tabindex="0" onkeydown="handleButtonKeyDown(event, 'premium_amount_filter')" data-sort-by='plan-metal-premium' onclick="filterBy(this)">
                        <%= l10n("premium_amount") %>
                      </a>
                      <a class="btn btn-default" id="deductible_filter" tabindex="0" onkeydown="handleButtonKeyDown(event, 'deductible_filter')" data-sort-by='plan-metal-deductible' onclick="filterBy(this)">
                        <%= l10n("deductible") %>
                      </a>
                      <a class="btn btn-default" id="carrier_filter" tabindex="0" onkeydown="handleButtonKeyDown(event, 'carrier_filter')" data-sort-by='plan-carrier' onclick="filterBy(this)">
                        <%= l10n("carrier") %>
                      </a>
                    </div>
                  </div>
                  <% if @market_kind == 'individual' || @market_kind == 'coverall' %>
                    <div id="ivl_plans">
                      <h3><%= l10n("loading") %>...</h3>
                    </div>
                  <% end %>
                  <% if @market_kind == 'shop' || @market_kind == 'fehb' %>
                    <div id="plans">
                      <%= render partial: "ui-components/v1/cards/plan_details", collection: @member_groups, as: :plan %>
                    </div>
                    <div id="filteredPlans" data-enrollments="<%= json_for_plan_shopping_member_groups(@member_groups) %>"></div>
                  <% end %>
                </div>
              </div>
            </div>
            <div class="no-buffer">
              <p class="pull-right">
                <a class="btn btn-default compare-selected-plans-link" href="javascript:void(0);" style="display: none;" data-uri="<%= comparison_products_plans_path(market_kind: @market_kind, coverage_kind: @coverage_kind) %>">
                  <%= l10n("compare_plans").to_s.upcase %>
                </a>
              </p>
            </div>
          </div>
          <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12 col-md-offset-1 col-sm-offset-1 right-section">
            <% if @change_plan.blank? && @market_kind == "individual" %>
              <% if @enrollment_kind.blank? && is_under_open_enrollment? %>
                <%= render partial: 'shared/individual_progress', locals: { step: '4' } %>
              <% else %>
                <%= render partial: 'shared/sep_progress', locals: { step: '5' } %>
              <% end %>
            <% elsif @change_plan.blank? && @market_kind == "coverall" %>
              <%= render partial: 'shared/resident_progress', locals: { step: '4' } %>
            <% elsif @change_plan.blank? %>
              <%= render partial: 'shared/signup_progress', locals: { step: '5' } %>
            <% elsif @change_plan == "change_by_qle" %>
              <%= render partial: 'shared/qle_progress', locals: { step: '2', show_button: 'true' } %>
            <% elsif @change_plan == "change_plan" %>
              <% if (@market_kind == "individual" && !is_under_open_enrollment?) || @enrollment_kind == 'sep' %>
                <%= render partial: 'shared/sep_shop_for_plans_progress', locals: { step: '2' } %>
              <% else %>
                <%= render partial: 'shared/shop_for_plans_progress', locals: { step: '1', show_waive: true } %>
              <% end %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="ivl-plans-compare-alert">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
          <h4 class="modal-title"><%= l10n("plan_compare_alert") %></h4>
        </div>
        <div class="modal-body">
          <p><%= l10n(".can_not_select_more_than_n_plans_to_compare", number: 3) %></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <%= render partial: "ui-components/v1/modals/waive_confirmation_during_shopping", locals: { enrollment: @hbx_enrollment } if @hbx_enrollment.is_shop? %>

  <%= render partial: "ui-components/v1/modals/help_with_plan", locals: { enrollment: @hbx_enrollment } %>
  <script>
    var marketKind = "<%= @hbx_enrollment.is_shop? ? 'shop' : @hbx_enrollment.kind %>";
    // Needs to be defined outside of conditional for marketKind
    // because will try to render on plan_filters.html.slim even on individual market
    var selectedPlans = document.getElementsByClassName("myfilteredPlans");
    function resetAllFilters() {
      resetAptc();
      clearAll(); // Defined in plan_filters.js
      resetPlanTileSelection();
    }
    function resetAptc() {
      if ($('.aptc').length > 0){
        let element = document.querySelector('#elected_aptc');
        let original_aptc = element.dataset.elected;
        element.value = original_aptc;
        element.dispatchEvent(new Event('change', { bubbles: true }));
      }
    }
    function resetPlanTileSelection() {
      Array.from(selectedPlans).forEach(function (plan) {
        if (plan) {
          plan.remove();
        }
      });
      if ($('#plans').length > 0) {
        $('#plans').each( function () {
          $(this).removeClass('hidden');
        });
      }
    }
    if (marketKind === "shop") {
      var availableEnrollments = [];
      var availableCarriers = [];
      var filteredArray = [];
      var currentPlans = [];
      var filteredResultsArray = [];
      var enrollments = document.getElementById('filteredPlans').dataset.enrollments;
      var carriers = document.getElementById('filteredPlans').dataset.carriers;
      var filterType = String;
      // Needs to be used for IVL too
      // var selectedPlans = document.getElementsByClassName("myfilteredPlans");
      var carrierLogos = JSON.parse('#{raw(digest_logos.to_json)}');
      // Grabs available products as JSON for filtering onload
      (function () {
        document.getElementById('filteredPlans').classList.add('hidden');
        getEnrollments()
      })();
      var coverageKind = "#{@hbx_enrollment.coverage_kind}";
      // Allow filtering from high to low
      if (coverageKind == "dental") {
        $(".plan-metal-level-selection-filter").filter(
          plan_filter => plan_filter.id != 'plan-metal-level-high' && plan_filter.id != 'plan-metal-level-low'
        ).attr("disabled", true);
      }
      function filterBy(element) {
        filterType = element.dataset.sortBy;
        resetPlanTileSelection();
        clearAll()
        applyFilter()
        filteredPlans(filterType)
      }
      function getEnrollments() {
        enrollments = JSON.parse(enrollments)
        // Formats enrollment to proper JSON format for filters
        for (enrollment of enrollments) {
          enrollment = enrollment
          availableEnrollments.push(enrollment)
        }
      }
      function applyFilter() {
        // Apply's filtered plans to view
        document.getElementById('plans').classList.add('hidden')
        document.getElementById('filteredPlans').classList.remove('hidden')
      }
      function filteredPlans(type) {
        filteredArray = [];
        if (type == "plan-name") {
          // Filters by Title
          availableEnrollments.forEach(function (enrollment) {
              filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var titleA = a.product.title.toLowerCase();
            var titleB = b.product.title.toLowerCase();
            if (titleA < titleB) //sort string ascending
              return -1
            if (titleA > titleB)
              return 1
            return 0 //default return value (no sorting)
        })
        }
        if (type == "plan-metal-premium") {
          // Filter by premium
          availableEnrollments.forEach(function (enrollment) {
            filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var priceA = parseAmount(a.product_cost_total, 2) - parseAmount(a.sponsor_contribution_total, 2);
            var priceB = parseAmount(b.product_cost_total, 2) - parseAmount(b.sponsor_contribution_total, 2);
            if (Number(priceA) < Number(priceB)) //sort string ascending
              return -1
            if (Number(priceA) > Number(priceB))
              return 1
            return 0 //default return value (no sorting)
          })
        }
        if (type == "plan-metal-deductible") {
          // Filter by deductible
          availableEnrollments.forEach(function (enrollment) {
              filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var priceA = parseAmount(a.product.deductible, 0);
            var priceB = parseAmount(b.product.deductible, 0);
            if (Number(priceA) < Number(priceB)) //sort string ascending
              return -1
            if (Number(priceA) > Number(priceB))
              return 1
            return 0 //default return value (no sorting)
          })
        }
        if (type == "plan-carrier") {
          // Filters by Carrier
          availableEnrollments.forEach(function (enrollment) {
            filteredArray.push(enrollment)
          })
          filteredArray.sort(function (a, b) {
            var nameA = a.product.issuer_name.toLowerCase();
            var nameB = b.product.issuer_name.toLowerCase();
            if (nameA < nameB) //sort string ascending
              return -1
            if (nameA > nameB)
              return 1
            return 0 //default return value (no sorting)
          })
        }
        showFilteredResults()
      }
      function parseAmount(str, decimals){
        return parseFloat(str.replaceAll(/$|,/g, '')).toFixed(decimals);
      }
      function filterByMetalLevels(metalLevels, dataArray) {
        var resultsData = [];
        metalLevels.forEach(function (metalLevel) {
            dataArray.forEach(function (enrollment) {
                if (enrollment.product.metal_level_kind.toLowerCase() == metalLevel.toLowerCase()) {
                    resultsData.push(enrollment);
                }
            })
        })
        return resultsData;
      }
      function filterByPlanTypes(planTypes, dataArray) {
          var resultsData = [];
          planTypes.forEach(function (plan) {
              dataArray.forEach(function (enrollment) {
                if (enrollment.product.kind == 'dental' && enrollment.product.dental_plan_kind.toLowerCase() == plan.toLowerCase()){
                  resultsData.push(enrollment);
                }
                if (enrollment.product.kind == 'health' && enrollment.product.health_plan_kind.toLowerCase() == plan.toLowerCase()) {
                  resultsData.push(enrollment);
                }
              })
          })
          return resultsData;
      }
      function filterByCarrier(carrier, dataArray) {
          var resultsData = [];
          dataArray.forEach(function (enrollment) {
            if (enrollment.product.issuer_name.toLowerCase() == carrier.toLowerCase()) {
              resultsData.push(enrollment);
            }
          })
          return resultsData;
      }
      function filterByHSA(selectedHSA, dataArray) {
          var resultsData = [];
          var hsa = Boolean;
          if (selectedHSA == "Yes") {
              hsa = true;
          } else {
              hsa = false;
          }
          dataArray.filter(function (enrollment) {
              if (enrollment.product.hsa_eligibility == hsa) {
                  resultsData.push(enrollment);
              }
          })
          return resultsData;
      }
      function filterByOSSE(selectedOSE, dataArray) {
        var resultsData = [];
        var osse = Boolean;
        if (selectedOSSE == "Yes") {
            osse = true;
        } else {
            osse = false;
        }
        dataArray.filter(function (enrollment) {
          if (enrollment.product.is_hc4cc_plan == osse) {
              resultsData.push(enrollment);
          }
        })
        return resultsData;
      }
      function filterByPremiumAmountRange(selections, dataArray) {
          var resultsData = [];
          premiumFrom = parseFloat(selections.premiumFromAmountValue || 0).toFixed(2);
          premiumTo = parseFloat(selections.premiumToAmountValue || 0).toFixed(2);
          dataArray.forEach(function (enrollment) {
              premiumTotal = parseFloat(enrollment.product_cost_total - enrollment.sponsor_contribution_total).toFixed(2);
              if ((Number(premiumFrom) > 0 && Number(premiumTo) > 0) && (Number(premiumTotal) >= Number(premiumFrom) && Number(premiumTotal) <= Number(premiumTo))) {
                  resultsData.push(enrollment);
              }
              else if ((Number(premiumFrom) > 0 && Number(premiumTo) == 0) && (Number(premiumTotal) >= Number(premiumFrom))) {
                  resultsData.push(enrollment);
              }
              else if ((Number(premiumFrom) == 0 && Number(premiumTo) > 0) && (Number(premiumTotal) <= Number(premiumTo))) {
                  resultsData.push(enrollment);
              }
          })
          return resultsData;
      }
      function filterByDeductibleAmountRange(selections, dataArray) {
          var resultsData = [];
          deductibleFrom = parseFloat(selections.deductibleFromAmountValue || 0).toFixed(0);
          deductibleTo = parseFloat(selections.deductibleToAmountValue || 0).toFixed(0);
          dataArray.forEach(function (enrollment) {
              deductible = parseFloat(enrollment.product.deductible.replace(',', '').replace('$', '')).toFixed(0);
              if ((Number(deductibleFrom) > 0 && Number(deductibleTo) > 0) && (Number(deductible) >= Number(deductibleFrom) && Number(deductible) <= Number(deductibleTo))) {
                  resultsData.push(enrollment);
              }
              else if ((Number(deductibleFrom) > 0 && Number(deductibleTo) == 0) && (Number(deductible) >= Number(deductibleFrom))) {
                  resultsData.push(enrollment);
              }
              else if ((Number(deductibleTo) > 0 && Number(deductibleFrom) == 0) && (Number(deductible) <= Number(deductibleTo))) {
                  resultsData.push(enrollment);
              }
          })
          return resultsData;
      }
      function filterByNetworkTypes(networkTypes, dataArray) {
          var resultsData = [];
          networkTypes.forEach(function (networkType) {
            dataArray.forEach(function (enrollment) {
              if (networkType.toLowerCase() == 'dc-metro' || networkType.toLowerCase() == 'maine') {
                if (enrollment.product.dc_in_network) {
                  resultsData.push(enrollment);
                }
              }
              if (networkType.toLowerCase() == 'nationwide') {
                if (enrollment.product.nationwide) {
                  resultsData.push(enrollment);
                }
              }
            })
          })
          return resultsData;
      }
      function filterResultsSelections(selections) {
        var resultsArray;
        var filtered = false;
        metalLevels = selections.selectedMetalLevels;
        planTypes = selections.selectedPlanTypes;
        networkTypes = selections.selectedPlanNetworks;
        carrier = selections.selectedCarrier;
        selectedHSA = selections.selectedHSA;
        selectedOSSE = selections.selectedOSSE;
        resultsArray = availableEnrollments;
        if (metalLevels.length) {
          filtered = true;
          resultsArray = filterByMetalLevels(metalLevels, resultsArray)
        }
        if (planTypes.length) {
          filtered = true;
          resultsArray = filterByPlanTypes(planTypes, resultsArray)
        }
        if (networkTypes.length) {
          filtered = true;
          resultsArray = filterByNetworkTypes(networkTypes, resultsArray)
        }
        if (carrier) {
          filtered = true;
          resultsArray = filterByCarrier(carrier, resultsArray)
        }
        if (selectedHSA) {
          filtered = true;
          resultsArray = filterByHSA(selectedHSA, resultsArray)
        }
        if (selectedOSSE) {
          filtered = true;
          resultsArray = filterByOSSE(selectedOSSE, resultsArray)
        }
        if (selections.premiumFromAmountValue != "" || selections.premiumToAmountValue != "") {
          filtered = true;
          resultsArray = filterByPremiumAmountRange(selections, resultsArray)
        }
        if (selections.deductibleFromAmountValue != "" || selections.deductibleToAmountValue != "") {
          filtered = true;
          resultsArray = filterByDeductibleAmountRange(selections, resultsArray)
        }
        // Removes duplicates from results array
        filteredArray = removeDuplicates(resultsArray)
        if (filteredArray.length == 0 && !filtered) {
          filteredArray = availableEnrollments;
        }
        // Shows results in the view
        $("#plans-count").text(filteredArray.length);
        resetPlanTileSelection();
        applyFilter();
        resetComparePlan();
        showFilteredResults()
      }
      function showFilteredResults() {
        var element = document.getElementById('filteredPlans');
        filteredArray.forEach(function (result) {
          var logo = carrierLogos[result.product.issuer_name];
          if (result.product.kind == 'health') {
            var plan_kind = result.product.health_plan_kind
          }
          else if (result.product.dental_plan_kind) {
            var plan_kind = result.product.dental_plan_kind
          }
          // Used to show deductible for plan
          if (result.member_enrollments.length > 1) {
            var deductible = result.product.family_deductible;
            var deductibeType = "FAMILY DEDUCTIBLE"
          } else {
            var deductible = result.product.deductible;
            var deductibeType = "DEDUCTIBLE"
          }
          if (result.product.sbc_document) {
            var sbc_url = '/document/download/' + result.product.sbc_document.identifier.split("#")[0].split(":").pop() + '/' + result.product.sbc_document.identifier.split("#")[1] + '?content_type=application/pdf&amp;filename=' + result.product.title.replace(/[^0-9a-z]/gi, '') + '.pdf&amp;disposition=inline';
          }
          else {
            var sbc_url = "";
          }
          var network = "";
          if (result.product.dc_in_network) {
            network = "#{EnrollRegistry[:enroll_app].setting(:statewide_area).item}";
          }
          if (result.product.nationwide) {
            network = "#{EnrollRegistry[:enroll_app].setting(:nationwide_area).item}";
          }
          var standard_plan = "";
          if (result.product.is_standard_plan) {
            standard_plan = "#{EnrollRegistry[:enroll_app].setting(:standard_plan_label).item}";
          }
          var div = document.createElement('div')
          div.setAttribute('class', 'myfilteredPlans')
          div.innerHTML =
          `
          <div class="module plan-row panel panel-default">
                  <div class="panel-body">
                    <div class="row ${result.product.is_standard_plan ? '' : 'hidden'}">
                      <span class="ml-1 text-uppercase" style="color:green"><i class="fas fa-bookmark"></i> ${standard_plan}</span>
                    </div>
                    <div class="row mt-1">
                      <div class="col-sm-2 col-md-2">
                        <img width="80px" src="${logo}">
                      </div>
                      <div class="col-md-7" id="plans">
                        <h3 class="no-buffer pl-1"><a href="/products/plans/summary?active_year=${result.rate_schedule_date.split('-')[0]}&coverage_kind=${result.product.kind}&enrollment_kind=&hbx_enrollment_id=#{@hbx_enrollment.id.to_s}&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&standard_component_id=${result.product.hios_id}" data-remote="true">${result.product.title}</a>
                          <br>
                          <small>${result.product.issuer_name}</small>
                        </h3>
                      </div>
                      <div class="col-md-3">
                        <div class="price-wrapper pull-right">
                          <h2 class="no-buffer plan-premium">
                            $${parseFloat(Math.max((result.product_cost_total_after_subsidy - result.sponsor_contribution_total), 0.0)).toFixed(2)}
                          </h2>
                          <small style="font-size:12px" class="mt-0">Month</small>
                        </div>
                      </div>
                    </div>
                    <div class="row mt-2">
                      <div class="col-md-12">
                        <table class="table gn-12">
                          <thead>
                            <tr>
                              <th scope="col">TYPE</th>
                              <th scope="col">LEVEL</th>
                              <th scope="col">NETWORK</th>
                              <th scope="col">${deductibeType}</th>
                            </tr>
                          </thead>
                          <tbody>
                            <tr>
                              <td>${plan_kind.toUpperCase()}</td>
                              <td><span class="${result.product.metal_level_kind}-icon">${result.product.metal_level_kind.toUpperCase()}</td>
                              <td>${network}</td>
                              <td>${deductible}</td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-xs-3">
                        <div class="checkbox no-buffer">
                          <label>
                            <input id="compare_plan_checkbox" type="checkbox" class="checkbox-custom select-plan-for-comparison" data-hbx-id="#{@hbx_enrollment.id}" data-hios-id="${result.product.hios_id}" data-plan-year="${result.rate_schedule_date.split('-')[0]}" data-plan-enrollment-kind="${result.product.kind}" data-plan-change-plan="#{@change_plan}" onclick="comparePlan(this)">
                            <span class="checkbox-custom-label" for="compare_plan_checkbox" style="font-weight: bold" data-cuke="compare_plan_checkbox">Compare</span>
                          </label>
                        </div>
                      </div>
                      <div class="col-xs-4">
                        <a class="sbc_link health vertically-aligned-row interaction-click-control-summary-of-benefits-and-coverage" target="_blank" rel="noopener noreferrer" href= '${sbc_url}'>
                          Summary of Benefits and Coverage
                        </a>
                      </div>
                      <div class="col-md-5 col-sm-5 col-xs-5 pl-0 pr-0">
                        <a class="btn btn-default btn-right plan-select select" href="/insured/plan_shoppings/#{@hbx_enrollment.id.to_s}/thankyou?change_plan=&coverage_kind=${result.product.kind}&enrollment_kind=&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&plan_id=${result.product._id}">Select Plan</a>
                        <a class="btn btn-default ml-1" data-remote="true" href="/products/plans/summary?active_year=${result.rate_schedule_date.split('-')[0]}&coverage_kind=${result.product.kind}&enrollment_kind=&hbx_enrollment_id=#{@hbx_enrollment.id.to_s}&market_kind=${result.product.benefit_market_kind.replace('aca_', '')}&standard_component_id=${result.product.hios_id}">See Details</a>
                      </div>
                    </div>
                  </div>
                </div>
          `
            element.append(div)
          });
      }
    }
    if (marketKind === 'individual' || marketKind === 'coverall') {
      $(document).ready(function () {
        $.ajax({
          url: "<%= plans_insured_plan_shopping_path(id: @hbx_enrollment.id, change_plan: @change_plan, market_kind: @market_kind, coverage_kind: @coverage_kind, enrollment_kind: @enrollment_kind) if @hbx_enrollment.present? %>",
          type: "GET"
        });
      });
    }
    function removeDuplicates(data) {
      return data.filter((item, index,arr)=>{
        var c = arr.map(item=> item.product._id);
        return index === c.indexOf(item.product._id)
      })
    }
    String.prototype.replaceAll = function(search, replace) {
      if (replace === undefined) {
        return this.toString();
      }
      return this.replace(new RegExp('[' + search + ']', 'g'), replace);
    };
  </script>
<% end %>
