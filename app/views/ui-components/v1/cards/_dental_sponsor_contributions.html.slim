#sponsorContributions.mt-1
  .col-xs-12.mb-1
    .col-xs-6.offered-heading
      .text-uppercase.text-center
        | Offered
        i.fas.fa-question-circle data-toggle='tooltip' title=offered_tool_tip_helper
    .col-xs-6.offered-heading
      .text-uppercase.text-center
        | Employer Contribution
        i.fas.fa-question-circle data-toggle='tooltip' title=employer_contribution_tool_tip_helper
  .col-xs-12
    = sc.fields_for :contribution_levels, sc.object.contribution_levels, errors: {}, fieldset: false do |cl|
      .row.mb-1
        .col-xs-4.ml-4.mt-1
          = cl.hidden_field :id, value: cl.object.id
          = cl.hidden_field :contribution_unit_id, value: cl.object.contribution_unit_id
          = cl.check_box :is_offered, {class: 'contribution_handler', disabled: (cl.object.is_employee_cl), "data-displayname" => cl.object.display_name, onchange: "contributionAmounts(this)"}, "true", "false"
          = cl.object.display_name
          = cl.hidden_field :display_name, value: cl.object.display_name
        .col-xs-6
          .col-xs-3
            = cl.number_field :contribution_factor, class: "cl-input-#{cl.object.contribution_unit_id}", value: (cl.object.contribution_factor * 100).to_i, "data" => {"unit-id" => cl.object.contribution_unit_id.to_s}, :onchange => "setSliderInput(this); newContributionAmounts(this);"
          .col-xs-9
            input.slider class="slider-#{cl.object.contribution_unit_id.to_s}" data-unit-id=cl.object.contribution_unit_id min=0 max=100 step=1 type="range" value=(cl.object.contribution_factor * 100) oninput="setNumberInput(this); newContributionAmounts(this)"
