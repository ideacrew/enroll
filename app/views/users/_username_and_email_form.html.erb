<%= form_tag(confirm_change_username_and_email_user_path, method: :put, id: "changeUsernameForm", class:"form-horizontal", remote: true) do %>
	<%= hidden_field_tag :authenticity_token, form_authenticity_token %>
	<% if user.oim_id.present? %>
		<%= hidden_field_tag :current_oim_id, user.oim_id %>
	<% end %>
	<div class="row no-buffer form-wrapper-buffer">
	  <h3 class="title">Edit User Credentials</h3>
	  <div class="col-md-12 no-pd col-sm-12 col-xs-12">
	    <div class="col-md-3 col-md-offset-3 col-sm-3 col-md-offset-3 col-xs-12 form-group form-group-lg no-pd" style='margin-right: -225px; margin-left: 224px; !important;'>
	      New Username
	      <%= text_field_tag :oim_id, nil, {class:"input_txt", onblur:'validateFields()', id:'inputNewUsername'} %>
				<span id="helpBlock2" class="help-block username-block hidden"></span>
	    </div> 
	    <div class="col-md-3 col-sm-3 col-xs-12 form-group form-group-lg no-pd" style='margin-right: -225px; margin-left: 224px; !important;'>
	      New User_Email
	      <%= text_field_tag :new_email, nil, {class:"input_txt", onblur:'validateFields()', id:'inputNewEmail'} %>
				<span id="helpBlock2" class="help-block email-block hidden"></span>
	    </div>
	  </div>
	</div>

	<div class="row no-buffer child-row">
    <div class="col-md-12 no-pd col-sm-12 col-xs-12">   
      <button type='button', class="btn btn-info", id='resetUsernameAndEmail' onclick="resetFields()">Reset</button>
      <%= submit_tag "Update", class:'btn btn-primary', id:'submitUsernameChange' %> 
    </div>
  </div>
<% end %>

<script>
	var validUsername = false;
	
	(function() {
		document.getElementById('submitUsernameChange').classList.add('blocking');
	})();
	
	var currentOptions = {
		username:String,
		newEmail:String,
		validUsernamePresent:Boolean
	}
	
	function validateFields() {
		username = document.getElementById('inputNewUsername');
		newEmail = document.getElementById('inputNewEmail');
		
		currentOptions.username = username.value;
		currentOptions.newEmail = newEmail.value;
			
		if (username.value.length && username.value.length >= 8) {
			validateUsername(username.value)
		} else {
			document.getElementById('inputNewUsername').closest('.form-group').classList.add('has-error');
			document.getElementsByClassName('username-block')[0].classList.remove('hidden');
			document.getElementsByClassName('username-block')[0].innerHTML = "Username must be at least 8 characters";
		}
		
		if (currentOptions.newEmail.length && currentOptions.validUsernamePresent == true) {
			enableSubmit()
		} else {
			disableSubmit()
		}
	}
	
	function validateUsername(username) {
			fetch('/users/<%=user.id %>/check_for_existing_username_or_email?oim_id='+username.toLowerCase(),{
				mode: "no-cors",
				method: 'GET',
				credentials: "same-origin"
			})
			.then((resp) => resp.json())
			.then(function(data) {
				if (data.available) {
					currentOptions.validUsernamePresent = false;
					document.getElementsByClassName('username-block')[0].innerHTML = "Username is currently taken";
					invalidUsername()
				} else {
					validUn();
					currentOptions.validUsernamePresent = true;
				}
			})
	}
	
	function enableSubmit() {
		document.getElementById('submitUsernameChange').classList.remove('blocking');
	}
	
	function disableSubmit() {
		document.getElementById('submitUsernameChange').classList.add('blocking');
	}
	
	function invalidUsername() {
		document.getElementById('inputNewUsername').closest('.form-group').classList.add('has-error');
		document.getElementsByClassName('username-block')[0].classList.remove('hidden')
		validUsername = false;
	}
	
	function validUn() {
		document.getElementById('inputNewUsername').closest('.form-group').classList.remove('has-error');
		document.getElementsByClassName('username-block')[0].classList.add('hidden');
		validUsername = true;
	}
	
  function resetFields() {
    document.getElementById('inputNewEmail').value = '';
    document.getElementById('inputNewUsername').value = '';
		disableSubmit()
  }
</script>
