[{"severity":"convention","location":{"begin_pos":0,"end_pos":5},"message":"Style/Documentation: Missing top-level class documentation comment.","cop_name":"Style/Documentation","status":"unsupported"},{"severity":"convention","location":{"begin_pos":0,"end_pos":1},"message":"Style/FrozenStringLiteralComment: Missing frozen string literal comment.","cop_name":"Style/FrozenStringLiteralComment","status":"uncorrected"},{"severity":"convention","location":{"begin_pos":6,"end_pos":32},"message":"Style/ClassAndModuleChildren: Use nested module/class definitions instead of compact style.","cop_name":"Style/ClassAndModuleChildren","status":"uncorrected"},{"severity":"convention","location":{"begin_pos":1992,"end_pos":1994},"message":"Style/IfUnlessModifier: Favor modifier `if` usage when having a single-line body. Another good alternative is the usage of control flow `&&`/`||`.","cop_name":"Style/IfUnlessModifier","status":"uncorrected"},{"severity":"convention","location":{"begin_pos":1995,"end_pos":2046},"message":"Style/SafeNavigation: Use safe navigation (`&.`) instead of checking if an object exists before calling the method.","cop_name":"Style/SafeNavigation","status":"uncorrected"},{"severity":"convention","location":{"begin_pos":2077,"end_pos":2079},"message":"Style/GuardClause: Use a guard clause (`return unless user.identity_confirmed_token.present?`) instead of wrapping the code inside a conditional expression.","cop_name":"Style/GuardClause","status":"unsupported"},{"severity":"convention","location":{"begin_pos":2125,"end_pos":2131},"message":"Style/SoleNestedConditional: Consider merging nested conditions into outer `if` conditions.","cop_name":"Style/SoleNestedConditional","status":"uncorrected"},{"severity":"convention","location":{"begin_pos":2322,"end_pos":2328},"message":"Style/RedundantReturn: Redundant `return` detected.","cop_name":"Style/RedundantReturn","status":"uncorrected"},{"severity":"warning","location":{"begin_pos":2413,"end_pos":2426},"message":"Lint/UnusedMethodArgument: Unused method argument - `resource_name`. If it's necessary, use `_` or `_resource_name` as an argument name to indicate that it won't be used. You can also write as `after_resetting_password_path_for(*)` if you want the method to accept any arguments but don't care about them.","cop_name":"Lint/UnusedMethodArgument","status":"uncorrected"}]