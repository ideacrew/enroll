u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
@applicant.save(context: :tax_info)
params[:applicant]
@applicant
@applicant.is_required_to_file_taxes
@applicant.is_claimed_as_tax_dependent
exit
@applicant.save(context: :tax_info)
exit
@applicant.save(context: :tax_info)
params[:applicant]
params.keys
params
exit
params[:applicant]
params
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
@applicant
@applicant.is_required_to_file_taxes
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
@applicant.save(context: :tax_info)
params[:applicant]
@applicant
@applicant.is_required_to_file_taxes
@applicant.is_claimed_as_tax_dependent
exit
@applicant.save(context: :tax_info)
exit
@applicant.save(context: :tax_info)
params[:applicant]
params.keys
params
exit
params[:applicant]
params
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
@applicant.save(context: :tax_info)
params[:applicant]
@applicant
@applicant.is_required_to_file_taxes
@applicant.is_claimed_as_tax_dependent
exit
@applicant.save(context: :tax_info)
exit
@applicant.save(context: :tax_info)
params[:applicant]
params.keys
params
exit
params[:applicant]
params
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
@applicant.save(context: :tax_info)
params[:applicant]
@applicant
@applicant.is_required_to_file_taxes
@applicant.is_claimed_as_tax_dependent
exit
@applicant.save(context: :tax_info)
exit
@applicant.save(context: :tax_info)
params[:applicant]
params.keys
params
exit
params[:applicant]
params
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
params[:applicant]
params.keys
params[:applicant]
@applicant.save(context: :tax_info)
build_error_messages_for_tax_info(@applicant)
exit
u = User.find_by(oim_id: "admin@dc.gov")
u.password = "aeOERqR#34"
u.password_confirmation = "aeOERqR#34"
u.save
exit
expect(rendered).to match(/#{person.first_name}/)
expect(rendered).to match(/#{person.last_name}/)
expect(rendered).to match(/#{person.dob}/)
person.dob
exit
response
response.headers
exit
response
response.headers
exit
response.headers
response.status
exit
response
response.headers
response.status
exit
@applicant
params
@application
@application.active_applicants.find(params[:id])
exit
exit
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
@applicant.save(context: :tax_info)
params[:applicant]
@applicant
@applicant.is_required_to_file_taxes
@applicant.is_claimed_as_tax_dependent
exit
@applicant.save(context: :tax_info)
exit
@applicant.save(context: :tax_info)
params[:applicant]
params.keys
params
exit
params[:applicant]
params
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
params[:applicant]
@applicant.save(context: :tax_info)
exit
exit
exit
exit
exit
params[:applicant]
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
exit
response.status
response.headers['Location']
expect(response.headers['Location']).to include(match(/incomes/))
expect(response.headers['Location']).to include("incomes")
exit
page.has_css?('[data-cuke="tax_info_header"]')
expect(page).to have_css('[data-cuke="tax_info_header"]')
exit
@application
@application.incomplete_applicants?
@application.active_applicants.first
@application.active_applicants.first.is_required_to_file_taxes
exit
exit
find_all('.btn', text: 'ADD INCOME & COVERAGE INFO')
exit
find_all("li")
exit
IvlIapJobIncomeInformationPage.select_yearly
find(IvlIapJobIncomeInformationPage.select_yearly)
find(".fa-frequency-kind")
find(".fa-frequency-kind .selectric-wrapper")
find(".fa-frequency-kind li:last-of-type")
find(".fa-frequency-kind li:last-of-type").text
find(".fa-frequency-kind li:last-of-type").class
find(".fa-frequency-kind li:last-of-type").classes
find(".fa-frequency-kind li:last-of-type").css_class
find(".fa-frequency-kind li:last-of-type").attributes
find(".fa-frequency-kind li:last-of-type")[:class]
exit
IvlIapJobIncomeInformationPage.select_yearly
find(IvlIapJobIncomeInformationPage.select_yearly)
find(IvlIapJobIncomeInformationPage.select_yearly)[:disabled]
exit
exit
exit
exit
exit
IvlIapJobIncomeInformationPage.income_how_often_dropdown
find_all('li[class="fa-frequency-kind li"]')
find_all('li[data-index="7"]')
exit
find_all('.btn', text: 'ADD INCOME & COVERAGE INFO')
@applicant
exit
FinancialAssistance::Application.find("65e1fc5119a2220001cda8c4")
FinancialAssistance::Application.find("65e1fc5119a2220001cda8c4")
FinancialAssistance::Application.find("65e1fc5119a2220001cda8c4").primary_applicant
FinancialAssistance::Application.find("65e1fc5119a2220001cda8c4")
FinancialAssistance::Application.find("65e1fc5119a2220001cda8c4")
exit
find(:xpath, "//input[@value='CONTINUE'][@name='commit']")
find(:xpath, "//input[@value='CONTINUE'][@name='commit']")[:disabled]
exit
IvlPersonalInformation.tobacco_user_yes_radiobtn
exit
find_all("label")[:for]
find_all("label")

find_all("label").map{|l| l[:for]}
find_all("input").map{|l| l[:id]}
exit
find_all("input").map{|l| l[:id]}
exit
find(IvlIapTaxInformationPage.continue_btn)
exit
find_all(".btn", text: "ADD INCOME & COVERAGE INFO")
exit
exit
exit
FinancialAssistance::Application.find("5f625ab6ee089f527b07365e")
application = _
application.primary_applicant
application.primary_applicant.benefits
application.primary_applicant.has_enrolled_health_coverage_true
application.primary_applicant.has_enrolled_health_coverage
"2022-12-01".to_datetime
Date.strptime("2022-12-01".to_datetime, "%m/%d/%Y")
Date.strptime("2022-12-01".to_date, "%m/%d/%Y")
Date.strptime("2022-12-01".to_datetime.to_s, "%m/%d/%Y")
DateTime.strptime("2022-12-01")
DateTime.strptime("2022-12-01".to_s)
"2022-12-01".to_date
"2022-12-01".to_date.strftime("%m/%d/%Y")
application.primary_applicant.benefits
application.primary_applicant
application.primary_applicant.benefits
application.applicants.map{|a| [a.name, a._id]}
application.applicants.map{|a| [a.full_name, a._id]}
application.applicantss.first
application.applicants.first
application.applicants.first.benefits
exit
exit
FinancialAssistance::Application.find("66786e1df030fa000136f1c3")
application = _
application.applicants.first.benefits
application.applicants.first.benefits.first.insurance_kind = "medicare"
application.applicants.first.benefits.first.save
application.applicants.first.benefits.first.delete
application.applicants.first.benefits.first
FinancialAssistance::Application.find("66786e1df030fa000136f1c3")
application.applicants.first.benefits
application.applicants.first.benefits.destroy_all
application.applicants.first
app
FinancialAssistance::Application.find("66786e1df030fa000136f1c3")
application.applicants.first
application.applicants.first.benefits
application.applicants.first.benefits.destroy_all
application.applicants
application.primary_applicant.benefits
application.primary_applicant
exit
params[:deduction]
params[:deduction][:start_on]
format_date_string(params[:deduction][:start_on].to_s)
 params[:deduction][:end_on]
params[:deduction][:end_on] = format_date_string(params[:deduction][:end_on].to_s, date_format) if params[:deduction][:end_on].present?
params[:deduction][:end_on] = format_date_string(params[:deduction][:end_on].to_s) if params[:deduction][:end_on].present?
exit
exit
find_all(".btn", text: "ADD INCOME & COVERAGE INFO").count
exit
exit
exit
find_all("h1").map{|h|h.text}
exit
exit
exit
exit
exit
exit
exit
find_all('button').map{|b| b.text}
find_all('.btn').map{|b| b.text}
find_all('#btn-continue').map{|b| b.text}
find_all('#btn-continue')
exit
find(IvlIapIncomeAdjustmentsPage.health_savings_account_glossary_link)
find_all(IvlIapIncomeAdjustmentsPage.health_savings_account_glossary_link).count
exit
find_all("h2").map{|h| h.text}
exit
exit
find_all("h2").map{|h| h.text}
exit
exit
exit
exit
exit
exit
exit
exit
find_all("div").map{|d| d.class}
find_all("div").map{|d| d.text}
exit
exit
find('.interaction-click-control-sign-in')
exit
exit
exit
exit
find_all("button").map(&:text)
find_all("a").map(&:text)
find_all("h2").map(&:text)
find_all("h1").map(&:text)
find_all("p").map(&:text)
exit
find('#btn-continue')['disabled']
exit
find_all('.container').count
find_all('div').count
exit
find_link('Logout')
find_link('Logout')['href']
visit "/"
find_all('div').count
find_all('.container').count
find_all('.container.welcome').count
action_name
currentUrl = driver.getCurrentUrl();
exit
root_path
driver.getCurrentUrl()
exit
request.request_uri
page_name
current_path
exit
current_path
find_all('.container.welcome').count
current_url
ENV['LOGOUT_URL']
visit "http://#{Capybara.current_session.server.host}:#{Capybara.current_session.server.port}"
current_url
find_all('.container.welcome').count
exit
FinancialAssistanceRegistry.feature_enabled?(:divorce_agreement_year)
expect(page).to have_content 'from a divorce agreement finalized before January 1, 2019'
exit
FinancialAssistanceRegistry.feature_enabled?(:divorce_agreement_year)
expect(page).to have_content 'from a divorce agreement finalized before January 1, 2019'
exit
expect(page).to have_content 'from a divorce agreement finalized before January 1, 2019'
find_all(".deduction-kind").map(&:id)
FinancialAssistance::Deduction::DEDUCTION_TYPE
find_all(".deduction-kind").map(&:id)
current_path
exit
FinancialAssistanceRegistry.feature_enabled?(:divorce_agreement_year)
expect(page).to have_content 'from a divorce agreement finalized before January 1, 2019'
exit
bps = BenefitMarkets::Products::Product.where(:"application_period.min" => Date.new(2024, 1, 1)).map(&:id))
benefit_coverage_period.benefit_packages.each do |bp|\
  bp.benefit_ids = bps\
  bp.save\
end
bps = BenefitMarkets::Products::Product.where(:"application_period.min" => Date.new(2024, 1, 1)).map(&:id)
benefit_coverage_period.benefit_packages.each do |bp|\
  bp.benefit_ids = bps\
  bp.save\
end
benefit_coverage_period = HbxProfile.all.last.benefit_sponsorship.benefit_coverage_periods.last
benefit_coverage_period.benefit_packages.each do |bp|\
  bp.benefit_ids = bps\
  bp.save\
end
u = User.where(oim_id: "admin@dc.gov")
u = User.where(oim_id: "admin@dc.gov").first
u.update_attributes(password: "aeOERqR#34")
exit
{family_members: family_members}
FamilyMember.find("5f15d529b72a3b472d0e543c"]
FamilyMember.find("5f15d529b72a3b472d0e543c")
family_members = [_]
coverage_kind = "health"
family = family_mambers
family = family_members
family = Family.find("5f15d529b72a3b472d0e5440")
american_indian_members = false
hbx_enrollment = HbxEnrollment.find("66915bc603d82100016d5c32")
market = "individual"
family_members
shopping_family_member_ids = family_members.map(&:id)
csr_kind = "csr_0"
{family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members,\
                                    american_indian_members: hbx_enrollment,\
                                    effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }
bcp = BenefitCoveragePeriod.find("65ea2f3897d8021751e1bfeb")
bcp.get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members,\
                                    american_indian_members: hbx_enrollment,\
                                    effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
bcp.get_benefit_packages()
ivl_bgs = get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members, effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
bcp.get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members, effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
reload
reload!
bcp.get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members, effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
exit
FamilyMember.find("5f15d529b72a3b472d0e543c")
family_members = [_]
coverage_kind = "health"
family = Family.find("5f15d529b72a3b472d0e5440")
american_indian_members = false
hbx_enrollment = HbxEnrollment.find("66915bc603d82100016d5c32")
market = "individual"
shopping_family_member_ids = family_members.map(&:id)
csr_kind = "csr_0"
bcp = BenefitCoveragePeriod.find("65ea2f3897d8021751e1bfeb")
bcp.get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members, effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
bcp.get_benefit_packages({family_members: family_members, coverage_kind: coverage_kind, family: hbx_enrollment.family, american_indian_members: american_indian_members, hbx_enrollment: hbx_enrollment, effective_on: hbx_enrollment.effective_on, market: market, shopping_family_members_ids: shopping_family_member_ids, csr_kind: csr_kind }).uniq
exit
BenefitSponsors::Organizations::Organization.broker_agency_profiles
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all.count
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all.first
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all.last
BenefitSponsors::Profiles::BrokerAgencies::BrokerAgencyProfiles.all.count
BenefitSponsors::Profiles::Registrations.all.count
BenefitSponsors::Organizations::BrokerAgencyProfile.all.count
::BenefitSponsors::Organizations::BrokerAgencyProfile.all.count
BenefitSponsors::Organizations::Profile.all.count
BenefitSponsors::Organizations::BrokerAgencyProfile.all.count
BenefitSponsors::Organizations::Organization.broker_agency_profiles.last
BenefitSponsors::Organizations::ExemptOrganization.all.last
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all.map(&:class)
BenefitSponsors::Organizations::Organization.broker_agency_profiles.all.map(&:entity_kind)
exit
